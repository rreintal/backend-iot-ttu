// <auto-generated />
using System;
using App.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.DAL.EF.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240401195447_accessDetails")]
    partial class accessDetails
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.AccessDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OpenSourceSolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OpenSourceSolutionId");

                    b.ToTable("AccessDetails");
                });

            modelBuilder.Entity("App.Domain.ContactPerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ContactPersons");
                });

            modelBuilder.Entity("App.Domain.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContactPersonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FeedPageCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FeedPagePostId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HomePageBannerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageStringId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OpenSourceSolutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PageContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ContactPersonId");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("FeedPageCategoryId");

                    b.HasIndex("FeedPagePostId");

                    b.HasIndex("HomePageBannerId");

                    b.HasIndex("LanguageStringId")
                        .IsUnique();

                    b.HasIndex("NewsId");

                    b.HasIndex("OpenSourceSolutionId");

                    b.HasIndex("PageContentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("App.Domain.ContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ContentTypes");
                });

            modelBuilder.Entity("App.Domain.EmailRecipents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("EmailRecipents");
                });

            modelBuilder.Entity("App.Domain.FeedPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FeedPageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FeedPageName")
                        .IsUnique();

                    b.ToTable("FeedPages");
                });

            modelBuilder.Entity("App.Domain.FeedPageCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedPageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FeedPageId");

                    b.ToTable("FeedPageCategories");
                });

            modelBuilder.Entity("App.Domain.FeedPagePost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FeedPageCategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FeedPageCategoryId");

                    b.ToTable("FeedPagePosts");
                });

            modelBuilder.Entity("App.Domain.HasTopicArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TopicAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TopicAreaId");

                    b.ToTable("HasTopicAreas");
                });

            modelBuilder.Entity("App.Domain.HomePageBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("HomePageBanners");
                });

            modelBuilder.Entity("App.Domain.Identity.AppRefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpirtationDT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("AppRefreshTokens");
                });

            modelBuilder.Entity("App.Domain.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("App.Domain.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("App.Domain.Identity.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("App.Domain.ImageResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("NewsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PageContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.HasIndex("PageContentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ImageResources");
                });

            modelBuilder.Entity("App.Domain.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("App.Domain.OpenSourceSolution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("OpenSourceSolutions");
                });

            modelBuilder.Entity("App.Domain.PageContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PageIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PageContents");
                });

            modelBuilder.Entity("App.Domain.PartnerImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PartnerImages");
                });

            modelBuilder.Entity("App.Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsOngoing")
                        .HasColumnType("boolean");

                    b.Property<string>("ProjectManager")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ProjectVolume")
                        .HasColumnType("double precision");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("App.Domain.TopicArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageStringId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LanguageStringId")
                        .IsUnique();

                    b.ToTable("TopicAreas");
                });

            modelBuilder.Entity("App.Domain.Translations.LanguageString", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TopicAreaId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("LanguageStrings");
                });

            modelBuilder.Entity("App.Domain.Translations.LanguageStringTranslation", b =>
                {
                    b.Property<Guid>("LanguageStringId")
                        .HasColumnType("uuid");

                    b.Property<string>("LanguageCulture")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("TranslationValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LanguageStringId", "LanguageCulture");

                    b.ToTable("LanguageStringTranslations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("App.Domain.AccessDetails", b =>
                {
                    b.HasOne("App.Domain.OpenSourceSolution", "OpenSourceSolution")
                        .WithMany("AccessDetails")
                        .HasForeignKey("OpenSourceSolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenSourceSolution");
                });

            modelBuilder.Entity("App.Domain.Content", b =>
                {
                    b.HasOne("App.Domain.ContactPerson", "ContactPerson")
                        .WithMany("Content")
                        .HasForeignKey("ContactPersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.FeedPageCategory", "FeedPageCategory")
                        .WithMany("Content")
                        .HasForeignKey("FeedPageCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.FeedPagePost", "FeedPagePost")
                        .WithMany("Content")
                        .HasForeignKey("FeedPagePostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.HomePageBanner", "HomePageBanner")
                        .WithMany("Content")
                        .HasForeignKey("HomePageBannerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.Translations.LanguageString", "LanguageString")
                        .WithOne("Content")
                        .HasForeignKey("App.Domain.Content", "LanguageStringId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.News", "News")
                        .WithMany("Content")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.OpenSourceSolution", "OpenSourceSolution")
                        .WithMany("Content")
                        .HasForeignKey("OpenSourceSolutionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.PageContent", "PageContent")
                        .WithMany("Content")
                        .HasForeignKey("PageContentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Project", "Project")
                        .WithMany("Content")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ContactPerson");

                    b.Navigation("ContentType");

                    b.Navigation("FeedPageCategory");

                    b.Navigation("FeedPagePost");

                    b.Navigation("HomePageBanner");

                    b.Navigation("LanguageString");

                    b.Navigation("News");

                    b.Navigation("OpenSourceSolution");

                    b.Navigation("PageContent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("App.Domain.FeedPageCategory", b =>
                {
                    b.HasOne("App.Domain.FeedPage", "FeedPage")
                        .WithMany("FeedPageCategories")
                        .HasForeignKey("FeedPageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FeedPage");
                });

            modelBuilder.Entity("App.Domain.FeedPagePost", b =>
                {
                    b.HasOne("App.Domain.FeedPageCategory", "FeedPageCategory")
                        .WithMany("FeedPagePosts")
                        .HasForeignKey("FeedPageCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FeedPageCategory");
                });

            modelBuilder.Entity("App.Domain.HasTopicArea", b =>
                {
                    b.HasOne("App.Domain.News", "News")
                        .WithMany("HasTopicAreas")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.TopicArea", "TopicArea")
                        .WithMany()
                        .HasForeignKey("TopicAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("News");

                    b.Navigation("Project");

                    b.Navigation("TopicArea");
                });

            modelBuilder.Entity("App.Domain.Identity.AppRefreshToken", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("AppRefreshTokens")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.Identity.AppUserRole", b =>
                {
                    b.HasOne("App.Domain.Identity.AppRole", "AppRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("App.Domain.Identity.AppUser", "AppUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("App.Domain.ImageResource", b =>
                {
                    b.HasOne("App.Domain.News", "News")
                        .WithMany("ImageResources")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("App.Domain.PageContent", "PageContent")
                        .WithMany("ImageResources")
                        .HasForeignKey("PageContentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("App.Domain.Project", "Project")
                        .WithMany("ImageResources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("News");

                    b.Navigation("PageContent");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("App.Domain.TopicArea", b =>
                {
                    b.HasOne("App.Domain.Translations.LanguageString", "LanguageString")
                        .WithOne("TopicArea")
                        .HasForeignKey("App.Domain.TopicArea", "LanguageStringId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LanguageString");
                });

            modelBuilder.Entity("App.Domain.Translations.LanguageStringTranslation", b =>
                {
                    b.HasOne("App.Domain.Translations.LanguageString", "LanguageString")
                        .WithMany("LanguageStringTranslations")
                        .HasForeignKey("LanguageStringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageString");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("App.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("App.Domain.ContactPerson", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("App.Domain.FeedPage", b =>
                {
                    b.Navigation("FeedPageCategories");
                });

            modelBuilder.Entity("App.Domain.FeedPageCategory", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("FeedPagePosts");
                });

            modelBuilder.Entity("App.Domain.FeedPagePost", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("App.Domain.HomePageBanner", b =>
                {
                    b.Navigation("Content");
                });

            modelBuilder.Entity("App.Domain.Identity.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("App.Domain.Identity.AppUser", b =>
                {
                    b.Navigation("AppRefreshTokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("App.Domain.News", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("HasTopicAreas");

                    b.Navigation("ImageResources");
                });

            modelBuilder.Entity("App.Domain.OpenSourceSolution", b =>
                {
                    b.Navigation("AccessDetails");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("App.Domain.PageContent", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("ImageResources");
                });

            modelBuilder.Entity("App.Domain.Project", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("ImageResources");
                });

            modelBuilder.Entity("App.Domain.Translations.LanguageString", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("LanguageStringTranslations");

                    b.Navigation("TopicArea");
                });
#pragma warning restore 612, 618
        }
    }
}
